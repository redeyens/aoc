using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;


public class Program
{
	public static void Main()
	{
		long result = 0;
		
		foreach(var line in GetLines(input))
		{
			var calc = new Calculator();
			
			for(int i = 0; i < line.Length; i++)
			{
				var symbol = line[i];
				
				if(symbol == ' ')
					continue;
				
				//Console.Write("{0}_", symbol);
				
				switch(symbol)
				{
					case '+':
						calc.Add();
						break;
					case '*':
						calc.Mul();
						break;
					case '(':
						calc.LParen();
						break;
					case ')':
						calc.RParen();
						break;
					default:
						long arg = symbol - '0';
						if(arg < 0 || arg > 9)
							break;
						calc.EnterOperand(arg);
						break;
				}
				
			}
		
			var partialResult = calc.GetResult();
			result += partialResult;
			Console.WriteLine(partialResult);
		}
		
		Console.WriteLine("Done result is {0}.", result);
	}
	
	private class Calculator
	{
		long operand = 0;
		char operation = ' ';
		Stack<ValueTuple<long,char>> opStack = new Stack<ValueTuple<long,char>>();
		
		public void LParen()
		{
			if(operation != ' ')
				opStack.Push(new ValueTuple<long,char>(operand, operation));
			
			opStack.Push(new ValueTuple<long,char>(0,'('));
			
			operand = 0;
			operation = ' ';
		}
		
		public void RParen()
		{
			if(opStack.Count > 0)
			{
				operand = GetResult();
				opStack.Pop();
			}
			operation = ' ';
		}
		
		public void Add()
		{
			operation = '+';
			if(opStack.Count > 0)
			{
				var pending = opStack.Peek();
				if(pending.Item2 == '+')
					operand = GetResult();
			}
		}
		
		public void Mul()
		{
			operation = '*';
			if(opStack.Count > 0)
			{
				operand = GetResult();
			}
		}
		
		public void EnterOperand(long num)
		{
			if(operation != ' ')
				opStack.Push(new ValueTuple<long,char>(operand, operation));
				
			operand = num;
			operation = ' ';
		}
		
		public long GetResult()
		{
			long result = operand;
			
			//Console.Write("\n[{0}]", string.Join(",", opStack.Select(x => string.Format("({0},{1})", x.Item1, x.Item2))));
			
			while(opStack.Count > 0 && opStack.Peek().Item2 != '(' && !(operation == '+' && opStack.Peek().Item2 == '+'))
			{
				//Console.Write(".{0}.", opStack.Peek().Item2);
				var pending = opStack.Pop();
				
				if(pending.Item2 == '+')
					result += pending.Item1;
				else
					result *= pending.Item1;
			}
			//Console.WriteLine(result);
			return result;
		}
	}
	
	private static IEnumerable<string> GetLines(string input)
	{
		var inputReader = new StringReader(input);
		string currentLine = null;
				
		while((currentLine = inputReader.ReadLine()) != null)
			yield return currentLine;
	}
	
	private static string input = @"(8 * 4 + 6 + (7 + 3 * 9 + 4 * 3) + 2 + 2) * 3 * 8 * 2 * 9 * (5 * 5 * 2 * 6)
3 + 4 + 2 * ((6 * 2 + 4 + 5 * 6 * 8) + (3 * 8 * 6 + 8 * 7) + 2 + (7 + 3) * 9 * 5) * 8
(4 + 3 * 8) * (7 * 3 * 8 * 3 + 4) + (8 + 2 + (7 + 4 * 3 * 3)) * (4 * (8 * 6 + 4 + 8 * 5) + 4 + 5 * 7 * (8 + 8 * 4 * 5 * 7)) + (9 * 6 + 8) * (6 + 8 + 5 + 5)
7 + 9 + 3 + ((2 + 6 * 6 * 6 * 5 + 4) * 8 * (9 + 5 + 4) * 7) + 5
((9 + 6 + 2 * 4 + 3 + 9) * (8 * 6 * 9) * 8 * 2 * 7) + 9
7 * 2 + (9 * (7 * 5 + 3 + 9 + 4) + 3 + 7 + 2 * (4 * 8 + 9 + 2 * 8)) + 9 * 7 + 8
9 * 7 + 8 + 3
(9 + (6 + 7 * 2 + 5 + 9) * (2 * 8) * 8 * 5) * 4
(5 * 8 + 6) + 2 * 8 + 2 * ((8 * 8 + 2) + (8 + 2 + 7 + 7) * (5 + 6 + 8 * 4 * 2) * 7) * (6 + 3 + 5 * 6 + 3)
2 + 6 * (7 + 2 + 7 * 9 + (9 + 6 * 5 + 8 + 8) + (4 + 9 * 6))
8 + 5 + 8 * 9 + (4 + 5) + (4 * 9 + 2)
5 + (4 + 3 + 3) * ((6 * 8) * 6 * 3 * 8 + 3 * 8) * 2
(9 + 9 + 3 + (9 * 5 * 8) + 3 + (8 * 2 + 8 + 9)) * 8
(5 * 9 * (7 * 5 * 3 + 3 + 6 * 4)) + 3 * 4 + 3
(9 * 8 + 7) + (3 + 9 * 6 * (8 * 4 + 5 + 8 + 8 * 5) * (2 + 3 + 8)) + (7 * (5 + 8 + 7 * 4 * 7))
(5 * 5 + 2 * 2 * 9 + 6) * 2
(7 * 6 * 3 + 6 + 3 * 6) + 7 + 7 * 8 * (3 + 2 * 5) * 7
3 * 2 + 8 + 2 + ((3 + 2 * 5) + 3 * (3 + 6 + 5 * 3 + 8 * 3)) * (9 + 9)
((8 + 7 * 6) * 4 + 2) + 6 + 2 + 2
8 * (6 * 8 * 8 * 7 * 4 * (6 + 9 * 5 + 6 + 9 + 3)) + 5
(2 * 6 * 7 * 6) + 6 * (6 + 4) * (8 * 7)
9 * 2 + 6 * 2 * (7 + 9 + 9) + 3
7 * 4 + 5 + 7 * (5 * (9 + 7 * 3 + 5 + 3 + 3)) * 4
(3 + 4 * 2 + 4 * (2 * 8 + 4) * (4 + 2 + 6)) * 7 + 7 + 4
8 * 9 + 2 * 4 * (4 + 3) * 4
9 * 7 + (3 + 5 + 7) + 8 * 5 + 4
3 * (3 + 7 * 7 + 7 + (9 * 4 * 2 * 6 * 6)) + 2 + 8
7 + (8 * (9 * 5 + 4 * 6 + 5) + 3 + 3 + (4 * 4 + 7 + 7 * 4 + 7) + 9) + 2 + 2
((4 * 2 * 3 * 8 + 2 + 5) + 9) + (3 + 9) + 8 * 7 * (3 * 2 + 5 * 4 + 4) + 2
7 + 3 * 9 * (2 + 7 * (6 * 2) * 7 * 8 + 7) * 3 * 5
(2 + (9 + 6 + 5 * 5) * 7 * 9) + 3
4 + 2 + (4 * (3 + 8 * 9 + 9 * 2 + 2) * (7 * 4 + 5 + 6 * 4 + 5) + 5) + 8 + 4 + 7
(7 * 6 * 8 * 8 * 8 * 4) * ((5 + 7) + 9) + 2 * 4 + (9 + 7 + 4 + (6 * 7 + 4) * 3 * 5) + 8
(5 + (3 + 3 * 3 + 3 + 4 + 5) + 9) * 5 * 5 + 5 + 7 * (6 + 8 + (8 + 4 * 3 * 7 * 3) * (7 * 7 + 4 * 3) * 7 + 8)
(4 + 4 + 9 * (9 * 2 * 6 * 3 * 8) + 7) * 6 * 3 + 4
(9 + (7 * 4 * 8 * 6 + 5) * 6 + 8 * (6 * 3 * 8 * 6 + 9) * 2) * 5 + 9
(3 + 8 + 7) * 5 + 9 + 7
5 * (4 * 2 + 7 + 2) * 2
(4 + 9 * 2) + (3 + 6 + (2 + 4 * 7)) * 2
3 + 8
8 * (2 + 9 * 2 + 2) + 7 * 6 * (7 + 3 * 7 + 7 * 9 + 4) + 8
6 * ((7 + 9 + 7) + 7 * 6 * (7 * 7) * 7) * 6
4 * (8 * (3 + 9))
2 + (7 * 8 * 8 + (8 + 4 * 8 + 3) * (4 * 8) * 8) * 2
7 * 5 * 6 + 2 * 5 * 7
2 * 2 * (2 * (6 + 3 + 2 * 3 + 3) * 8 * 6) + 4
8 * 2 + 5 + (9 * 7 + 8 * 6 + 2 + 3)
6 + (3 + 2 + 3 + 4 * 9)
(9 + 8 * 2) * 9 + ((2 * 6 + 8 * 7 * 7 * 2) + 5 * 6) + 8 + 7
8 + ((3 + 9) * 5 + 3 * 3 + 8 + 7) * 6 * 3 * 4 * 9
(6 + 5 * 7) + ((2 + 9 + 3 * 2) * (3 + 8 + 9 * 5) + 2 * (3 + 9 + 3) + 2 * (2 + 8 + 9))
8 + 9 + (6 * (2 * 4 * 9) + 5 + 9) + ((8 * 2 * 7 + 9 + 4 + 9) * (5 + 2 + 4 + 4)) + 4
(6 * 9 + 4 * 6 + 7 * (9 + 8)) + 3 + 4 + (6 * 2 + 3 + 2 + 8) * 6 + (4 + 7)
3 + 6 + (6 + 7 + (4 * 5 + 4 + 5 * 3 * 7)) * 6 * 6
3 + (2 + 4 + 8 * 4 * 6) + ((4 * 7 + 2 + 4 + 3) * 8) * 8 * 9 + 4
4 * 9 + 2 * 9 * (4 * 7 * 9 * 6 + 8) + (6 + 6 + 7 + 6)
(9 * 5 + (7 + 9 * 9 + 5)) * 9 + 5 * 7
(2 + 2 * (3 * 6) * 8) * 5 * (8 + (7 + 6 + 2 + 9 * 9 * 9) * 2 * 4 + 4) + 2
6 * 2 * (6 * (7 + 6) * 4)
8 * 9 + 3 * 8
4 * 2 * 6 + (8 * 5)
9 * 9 + 2
7 * 6 * 4 + 9 * ((8 * 5 + 5) + 8 + 7)
((3 + 2 * 9 + 4 * 6) * 9 + 3 + 4) * 4 * 2
4 * 5 + (6 * 4 * 8 * 5 + 6)
9 + (6 * (5 + 7 + 3 * 2 * 2 + 4) * (8 + 5) * 6 + 2) * 2 + (2 * 7 + 3 * 3 * 7 + (5 * 6 + 2)) * 9
(8 + 8 * 5) + (4 + 8) * 4 * 6 + 8
9 + 9 + 5
((9 * 7 + 4 + 3) * 9 * 5 + 3 + 7) * 2
7 * 4 * (7 * (6 * 7 + 2 * 9) + 5) * 5
((9 * 4 * 6 + 2) + 9 * 6 + 8 * 4 + 7) + 7 * 4 * 3 + 2
6 + 8
5 + 6 * (9 * 9 + 6 * 3 + 3 * 9) * (8 * 9 * 6 + (3 * 8) + 5 + 6) * (5 * 6 * 6 + 2 + 5 * 7) * 9
(6 + (2 + 8 * 6 * 4) * (5 + 2 + 8 + 4 + 3) + (9 + 2) + (6 * 6 + 2 + 3)) + 2
6 + (5 * 3) * (5 * 9 + 9 + (7 + 8 + 2 * 7 * 2) * 5) + (2 * 9 * 8)
3 * (6 * 2 * 4 + (7 * 7) + 4) + (6 + (8 + 3 * 6) * 3 + 3 * 5 * 6) * (4 + 3 + 2 * 7 + 8 * 5) + 3
(2 * (7 + 2 + 6 + 7 + 4) + 3 * 6 * (6 + 6) + 2) * 7
8 * 3 + 5 + (6 + 2 * 5 * 3 * 6)
((5 * 7 + 4 * 8 * 9 + 5) + 6 * 9 * 8 + 4) + (4 * 4 * 2 * 5 * 5) + 6
3 * ((5 + 2 * 7 + 9 * 9) * 3 + 8 * 6 + 2) + 9
(8 + (3 * 9 * 6 * 4) + 8 * 7) * 4 + 7
7 * (2 * 7 + (6 * 8 * 3 * 2 * 7 + 6) + 2 + 7 + 7)
(2 * (3 * 9) * 4 + 5 * 9) + 7 * 3
3 + ((9 + 6 + 7 + 6 + 8 + 6) * 3 * 8 * 2) * (9 * (8 * 8 * 8) * 4 * 7 + 6 * 6)
((6 + 8 + 8 * 2) * (7 * 2 * 7)) * 3 + 4 * (3 + 5 + 3)
3 + 4 * (4 + 2 + 2 * 4) + (6 + (6 + 7 + 5 * 4) + 9 * 2 + 3 * 2) * 7
(3 * 5 + 7 + 2 * 4) * ((8 * 2 + 2) * (8 * 9 + 9)) * 7 + (9 + 3 + 4 * 2 + 5) * (3 + 9 + 4 * 4) * 2
3 * 3 * 3 + ((5 * 5) * 4 * 7 * 5 * 2 * 6) * 4 * 7
2 * (9 * 7 + 2 * 5 * 5) * 7 * (6 * 4 * 4) + 4
(7 * 9 * 2) + 8 * (3 + 4 * (2 + 2 + 6 + 4 + 6) + (9 + 2) * 7 + 4)
9 * (3 + 3 + 2) * 6 + 9
(5 * 3 + 7 * 8) * 3
(7 * 8 * (5 + 5 * 7 * 6)) * 5 + 9 + (7 + (2 + 5 * 9 + 9 * 9) + 5 * 8 + 3) * 9
(3 + (9 * 6 + 5) * 2 + 4 + 9 * (9 + 4 * 9 * 8 + 5)) + 6 + 2 + 6 + 9
9 + (4 + (5 * 2 + 5 + 2 * 9) * 2 + (8 * 6))
4 * (9 * 5) + 6
4 * 9 + 6 + ((2 * 9 + 4 * 4 * 9 + 9) + (4 * 5 + 6 * 6) + 9 * 8 + 9)
8 * 2 + ((2 * 4 + 5 + 2 * 6) * (8 * 8 * 9 * 4) * 5 + 3) + (8 * 4 * (5 + 3 + 6 + 2 + 6) * (2 * 8 + 6 + 2 * 4)) + 3
3 + (8 + 6 * (4 + 7 + 8 * 2 + 9) * 8 + (7 + 3) + 5) + 2 * (9 + (2 + 6)) * 3 + 7
2 + 4 * 2 * (2 + 9 * (4 + 2) + 8 * 2)
4 + 2 + 2 * (9 * 7 + (8 * 8) + 5) + 5 * 2
8 * (9 * 7 * 9 + 6 * 7 + (5 * 9)) * 6 + 2 * 3 * 5
6 + (7 + 6) * 5 * 9
8 + 4
2 + 3 * (4 + 3) + 9 * (3 * 5 * 3)
9 + 4 * 9 + 4 * (2 * 9 + (7 + 9 * 2 + 9))
8 + 2 * 7 * (5 * 7 + 4 + 6 + 4) + (8 * 7 + (7 + 3 + 3 + 7 * 6)) * 2
5 + 6 + (3 + 4 + (8 + 7 + 8 * 8 + 8 + 8) * 9 * 7 * 7)
9 * (4 * 6)
((3 * 4 * 2 + 4 + 5) * (7 * 3 + 6) + 6 * 4 + 4) * (5 + 9 + 6 * 9 * 2 * 5) + 7 + 6 * 4
5 * ((7 * 3 + 7 * 4 * 2) * 3) + 5 * 9
(6 * 9 * 3) + 8 * 7 * 7 * 3
(6 * (2 * 9 + 9 + 5 + 9 * 4) + 6) * 4 + 7 + 7 + 3 * 5
(9 + 6 * 8) * 9
8 * ((7 * 7 * 5 * 2 + 8 + 7) * 2 * 9) * 9
(2 + 6 * 2 * 6) * (3 + 4 * 2 + 9 + 3 + 2) + 4 * 4 + 8
6 + 3 * 6 + (7 + 8 * 9 + 4 + (6 + 6 * 9)) + 8
(4 * (7 * 4 + 7 * 8 * 2) + (3 + 7) + 2) + 5 + (4 * 2)
5 * (8 + 3 * 8 * (4 * 8 * 5 + 3 * 8)) * 3 * 3 + 5 * 3
(6 + 4 * (9 * 9 + 6 + 5 + 2) * (8 * 8 + 5 + 9)) + ((5 + 2 + 4) * 8 + 4 + (6 * 5) + 7) * 8 * 6 * 9 + 8
5 + 9 + 8 + ((6 * 2 + 2) + 4 + 6 * 6 * 9)
5 + 7 * (4 * (7 * 3) + 9 + 6 + 8) + (4 + 3) * 8
2 + 6 + 3 * (3 + 7) + 6 + (3 * 5)
(7 + 2 + 3 * 4 * 8) + (6 * 3 + 5 * 6) * 2 * 7 + 4
5 * 2 * 8 + 6 * ((7 + 7 + 5 * 8 + 6 + 3) * 3 + 7 * 2 + 7 + 4)
(9 * 8) + 5 * (3 * 5 + (8 * 3) + (2 + 7 * 5 + 6 + 8 + 6)) + 8 * 5
3 + 3 + 5
6 * 2 + 7 + (5 + 9 * 5) * 6 * 3
6 + 3 + 5 * 5 + 9
2 + 7 + (4 * 3 * 4 * (7 * 5 + 9 + 2 * 5) * 5 + 8) + 6 + 9
2 + 4 + (9 * 3)
6 * 5 * 8 + 5 * (8 * 9 * 3 * 9) * ((6 * 7 * 7 + 5 * 9 * 9) + 5 * 3 + 9 + 5 + 6)
9 * 7 + (2 * 2 * 2 + 4 + 4 + 2) + 6 + 4 * 6
(4 * (8 * 8 + 7 * 5) + 3 + 9 * (9 * 6 * 8 * 5) + 7) + 8 * 6 + 5 * 7 * (7 + 5)
((5 * 9 * 9 + 4 * 7 + 2) + 8 * 8 + 9 * (2 * 5 + 4 + 9) + 2) + 7 * 3
(4 + 8 * 5 * 7 + 2 * 6) * 7 * (8 + (6 + 9 * 7) + 8 * (6 * 2) * 5 + 8) + 5 + 5 * 4
4 + (4 * (4 + 4 * 3)) * 2
((2 * 4 * 7 * 6) * (5 + 8 + 2 * 4 + 6 * 2) + (3 * 2 + 7 * 5 + 2) + 8 * 9) + 5 * 8 + 6 + 9 * 4
9 + 4 * ((3 + 3 + 8 * 4 * 7 * 6) * (4 + 3 * 9 * 5 + 7 + 5) + (4 + 2) * (7 * 5 + 9)) + 9
((7 + 7 + 7 * 2 * 6) * (9 + 9 + 2 * 5) * 2) * 6
(6 + (8 + 6 * 4)) * 9 * 8 + 6 * 8
9 + 5 + 7 + 2 + 9 + 4
4 * ((4 * 4 + 9) + 8) * 2
3 * ((7 * 8 * 9 + 7) + (2 * 4 + 4 + 9) * 9 + 8)
(7 + 8 * 5 + 6 * 9) * 5 + 2 + 4
7 + 5 * (7 * 6 + (4 + 3 * 5) * 9)
(3 + 4 * 5 + 9 + 9) + 8 + (4 + 8 + 3 * (8 * 4 + 7 * 4 * 4)) + 9
6 * (7 * 4) * 5 + (8 * 9 * 4 * (8 * 2 * 7 + 8 + 2) + 6) + 5 + 5
5 * 2 * 9 * (4 + 4 + (4 + 2) + 7) * 3
2 * 4 + (5 + 8 + 8)
(7 + 7 * 8 + 3 + 3) + (8 + 3 * 4 + 9 * 4 * (7 + 8 + 5)) + 2 * 7 * 2 + 6
6 * 9 + 8 * 8 + ((9 * 4 * 9 * 2 * 7) * 5 * 5 * 8 * 8 + 7) + 9
2 + 3 + 2 * 2 * 7 + (5 + 7 + 4 + 5 * 4)
2 * 6 * 7 * ((4 + 6 + 5 * 4) + 4 + 4 + 5) + 6 + 9
(2 + 9 + 7 * 4 * 4) + ((9 * 5) * 5 * 9 + 7) + 5 + 4 + 3 * 8
(6 + (6 * 7) + 3 + 3 * (6 + 6 + 9 + 8 * 2)) + 3 + 4
5 + 5 * (4 * 8 + 2 + 2 * 8) * (2 * 8 * 6 * 2 + (5 * 2 * 8 + 5 + 3) * 5) * 6
4 + (5 + 3 * 9) * (6 * 8 + 4 * (6 + 4 * 5 * 2))
((7 + 6 + 9 * 6) + 2 + 8 * 8) + (2 * 5 + 7) * 4 * (9 + 7 + 5 + 6) * 8 * 5
9 * (4 + 8 + 4 * 8 + (2 * 7 * 2 * 3)) + 2 * 2 + 2 + 8
7 * 6 + 9 * 6 + 9 + (3 + 3 + (5 + 8 * 6 * 5) * (5 + 6 + 4 + 2) + 3 + 3)
(5 * 3) + 4 * 5 * 8
((7 + 4) + 4) * (9 + 5 * 5 * 5) + ((9 + 3 + 7 * 3) * 4 + 5 * 6 * 9 * 5)
9 * 2 * 5 * 4
6 + 3 * 9 * ((3 + 2) * (7 * 4 * 6 * 7 * 9) * 4 * 6 * 8 * 6)
(7 * 6) + 9 + (5 + (6 * 2 * 3 * 8 * 8 + 4)) * 4
(8 * 5 * (9 * 7 + 8 + 2) * 6 * (5 + 3)) * 4
(2 + 6 + 6 + 7) + ((2 * 2) * 9)
6 * 3 + ((2 * 9 + 4) + (8 * 7 * 8 * 9 * 7 + 7) + 3 + 8 + (2 * 5 + 4 + 2 * 2 * 3)) + 2
(9 + 8 * 6) * 7 * 4 + (2 * 3 + 9) * 4 + 9
5 + 5 + ((5 + 8 * 4 + 6) * 3 + (4 * 6 + 3) + 2 * 9 + 8)
2 + 2 * 5 + (4 * (9 * 5 * 6) + 4 + 6)
(8 + 5 + (8 * 4) + 2) + 7
9 + (8 + 9 * 4 + 7 + (3 * 7) * 8) + (6 + (8 + 9 + 9) * 3) + 7 * 5 * 8
(3 + 9 + 3) + 3 * 2 * (5 + (7 + 4 + 3 + 8) + 7) * 5
((2 * 7 * 2 * 7 + 8 * 3) + (5 * 8 + 7) * 3 + 2 * 9 + 4) + (4 * 9) * 4 * 7 + ((9 + 4 + 4) + 6) * 7
5 * 9 + 4 * 9 + (6 * 6 + 7) * ((8 * 3 * 3 * 8 + 2 + 5) * (8 + 9 + 7 * 4 * 3 + 8) + 3 * 7)
6 * 9 + ((9 * 7 * 8 * 3) * (5 * 5) * (4 * 9) + 4) + 9
(5 + 4) * 9 + 3 * (7 * 2 * 3 + 3 * 3)
(7 + 8 * 8 * (5 + 9 * 4 * 3 * 3) + (3 + 3 * 9 * 2 * 9 + 4) + (8 + 5 + 6 * 9)) * 2 * 8 + (7 * 8) * 4 * 3
6 + 2 * 6
5 * 5 + ((7 + 9) + (9 + 7 * 3 * 6 * 9 + 3)) * 8 + 6 * 3
(3 + 6 * 8 * 7 * 2) + 3 * 5 + 8 * 8
(8 * 4 * 7 * (4 * 5) + 9 + (9 + 6 * 5 * 3 + 9)) + 5 + 9 * 7
8 + (8 + 9) * 5 * (8 + 4 + 3 + 6 + 6 + 8) * 6
7 * 5 * 8 + 8 * 7
7 + 5 + ((7 + 4 * 2 * 3 * 6) * 7 * 9 + 3) * ((5 + 5 * 7 * 6) * 7 + 7 + 3 + 5 * 4) + (5 * 8 * (4 * 4 + 6 * 2 * 4 + 2) + 8 * 7) * 5
(3 * 6 + (3 + 4 + 4 + 9 + 2) + 8 + 8 + 5) + 2 * 9 * 6 + (6 * (5 + 4 + 4) + 4 * 6)
8 * (3 + 9 * (5 * 2 * 7 + 5 * 2 * 4)) + 9 + 6 * 9
(5 * (5 + 6 + 5) + 6 * 7) + 6 + ((9 + 2 * 3 + 7 * 3 + 2) * 9 * 3) + (4 + 4 + (5 + 8 * 9 + 5 + 7 + 9)) + ((2 * 2) + 4 * (9 * 7 + 4 + 9 * 3) + 8 + 3 * 6)
(4 + (9 + 2 + 6 * 4) + 6 + (8 * 9 * 2 * 8 * 2 + 4) * (4 + 5 * 7 + 9 + 4 + 7) + (3 * 2 + 6)) * 4 * 6 + 8 * 4 + 9
(7 + (3 * 3 + 5 + 6 + 2) * 7) + 3 * 6 + (3 * 6 * 4 * 7 + 6 + 7) + 5
(5 + (2 * 4 * 6 + 9 + 3 + 9) * (5 + 3 * 2) * 3 * 8 * 3) * (3 + (3 + 2 + 4 * 5 + 3 * 3) + 9 * 2 * 5 + (2 + 4 * 2 * 6 + 6 + 9)) + (6 + 6 * 7)
(8 + 5 + 8 * 4 + (3 * 5 * 8)) * 7
4 * 8 + 4 + 9 * (6 * (8 + 8 * 5 * 6 * 5) * 8) + (3 * 4)
4 * (2 + 9 * 7 + (2 + 3)) + 6
5 + 9 * (2 + 6 + (3 * 7) * 2 + 5 + (5 + 9 * 2)) * (7 * 6 * 4 + 7 + 9 + 8) + ((5 + 2 * 5 + 2 * 9) * (7 * 6) + (2 * 8 * 8 * 9 * 3 + 4)) * 5
4 * 2 + 2 + 5 * (2 + 5 + 5 * 6 + 9)
3 + 7 * 7 + (3 + 8 * 4 + 8 * 4 + 9) * 3
2 + (7 + 6 * 9 * 7 + 4 + 6)
(4 + 2 * 9 + 3) * 4 * 2 * 7 * 7
5 + 7 + (4 * 9 * 2 * 9 * 4 + 9) + 2 + 5
(2 * 7) + (9 * 7 * 9 * 8) + 4 * 7
4 * (8 * 6 + 2 * (9 * 8) + 5 + 6) + 3
8 + 4 + 8 * 8 * 9 * 4
7 + ((9 + 4 * 6 * 5) * (5 * 3 * 8 * 3 + 4 * 6) + (5 * 8 + 2)) * 9 + 2
7 + 3 * (4 + 3 * 8) + (2 * 8 * 5 + 2 * 2 + 4) + 9 * 8
(5 * (9 * 3) + 5) * 8 * (2 * 3 + (5 * 8 + 2 * 3) + 3) * 5
5 * (8 + 7 * 3) * (4 + 5) * 5 * ((8 * 3 * 9) * 2 * 3 * 6)
3 * 6 * (8 + 8 * 4 + 9) + 6
3 + 3 * (4 + 8) + ((9 * 4) * 6)
(3 + 2 * 2 + 5 + (7 * 4 * 2 * 3 * 3 + 8)) + 7 + (3 * (6 * 6 * 7 * 5) * 8 * 4)
6 + 4 * 4 * (3 + (2 * 2 * 5 * 9 * 8) + 4 + 8 * 4) * 4 * 2
4 * (3 * 4 + 8 * 2) * 8 + (3 + (9 + 9)) * 6 * ((6 + 5 * 5) + 8)
3 + 2 + (9 * (5 + 9) * 5 + 6) + 8 + 6
8 + 8 + 7 * (2 + 7 + 2) * 5
2 * (2 + 8 * 5 + 2 * (6 * 6 * 6)) + 2
5 + 2 * (2 + 2 + 5 + 2) + 9 * ((9 * 8 + 2 + 3 + 8) * 7)
6 + 8 + 6 + 4 * (4 * 4) + ((5 * 3) + 2 + 5 + 3 + 5)
(7 + 8 * 9) * (8 + 2 + 2 * 4 + (2 * 3 + 7 + 3 + 4 * 8) * 5) + 9 + 3
7 * (6 * 9 * 4 * (5 + 4 + 8 + 3) + 5)
2 + 7 * 4 + (7 + (9 + 3) * (2 * 9 * 4 + 4))
3 + 2 * 3 * 8 * (5 + 9 * 5 + 4)
(5 * 4 * 6 * 8) + 2 + 8 * 4
7 + (6 + 6 * 7)
2 * 7 * 6 * (8 + 6 + (8 * 3 + 3 * 4 + 7)) + 4
2 * (5 + 4 + 9) * 9 * 8 * (2 + 9 * 6) * 6
4 * ((2 * 2 + 9 * 3) + (7 + 6 * 7 + 5 + 4)) * 4 * 3
7 * 5 * 6 + 8 * (6 * 8 + 6 * (9 + 7 + 9 + 9 * 7 * 9))
7 * 6 + ((4 * 4 * 3) + 9 * 4)
4 + 6 * 3 + 9 + (6 + 9 * (8 * 3) * 2 * (9 + 8 * 3) + 9) * (8 + 6)
6 + 7 + 8 * 4 + (8 * 6 + 2 * 4 * 8 * 6) * 7
(6 * 5 + 4) + 2 * (3 + 3 * 2) + ((4 + 6) + 7)
8 * 5 * 9 * 3 * 2 * (6 * 8)
4 + 6 + 2 + 5 * 6
2 * 3 * 6 * 6
6 + ((5 + 2 * 3) + (9 + 5)) * 2 + 5
(4 * 9) + 6
8 * 3 * 7 * 9 * 7 * 4
(2 + 9 + 3 * 8) * (2 + 2 + 2 + (2 * 7 * 2) * 3 * 3) * 7 * 6 + (9 + 8 * 6 + (5 * 3 + 2 + 3)) + 9
9 + 6 * ((8 + 7) + (3 * 7 + 5) + (8 + 3 + 4 * 6 * 8) + 8) * 6
4 * (7 * 2 + 2) + (4 * (4 * 4 * 5) + 9 + 2) + 7 * 6
6 + 9 + 4 + (8 * 8 + 2)
(5 + 8 + 9) * 8 * (7 * 9)
6 * (6 * 4 * (7 + 4 * 7) * 4 + (3 * 2 * 5 + 8 * 3)) + 9
(2 * 9 * 4 + 5 + 8) + 4 * 5 * (7 + (6 + 6 * 7 * 2) + (7 * 8 + 7 * 5 * 2 * 3) + 5 + 6 + (6 * 9 + 8 * 2 + 9 + 2)) + 6 + (3 + 3 + (9 * 6 * 6 + 5 + 9 * 2) + 6 * 2)
(5 + 3 * 2) + 6 * 9 + (2 * (8 + 9 + 2) + 4 + 4 * (9 + 4 * 2))
(6 * (2 * 2 + 2) * (2 + 2 * 8 * 4 * 6) * 8 * 7) * 5 * 5 + (8 * 8) * (5 * 9 * 8)
6 * 2 * 8 * ((4 * 2 * 6 + 3) + 6) * 5
(4 * 5 + 5 + 5 * 7 + 4) + (5 + 8 * 5 + 9 + (9 * 7 * 2 * 4 + 5 * 4) + 2) * 4 * 8 + 3
(7 * 5) + ((8 * 7 + 4 * 6 * 4) + 9 + 4 + 7)
2 + (7 * 7) * 5 * 7 + 6 * 6
4 + (5 + 3 + (4 + 5) * 3) + 5 + 2
(3 * 6 * (3 * 5 * 3 * 4 + 6) + 8) * (3 * 2 * 9 * 4 * (2 + 8 * 6 + 4 * 4) + 4) + 5 * 5
7 + (5 * 6 * (6 * 2) * (7 + 4 + 3) + 6 * 7)
(7 * 4 + 6 + 7 + 8 + (2 * 2 * 6 * 4 + 2)) * 2 + 4 * 2
7 * ((5 * 7 * 3 + 2) + (3 * 2 + 9 + 6 + 8 * 2) + 8 + 7 * 7 + 2) * 8 + 7 + ((9 * 8 + 3 + 3 + 9 * 9) + 8 * 2 + 7 * 5) * 7
(7 * 5 * 2 + 7) + 9 * 6
6 * 4 * 4 + (3 * 3 + 7 * 5) * 4 * 9
2 * ((3 * 6 * 4) * 4 * 5 * (5 * 2 + 4 * 2 * 3 + 8) * 4 + 6) * 5 + 8
2 + (5 * 3) * (5 + 6 + 9 + 4 * (9 + 7 + 7)) * 8 + 4 + 2
((2 + 5) * 4 + 2 + 7 * 6) + ((6 + 2) * 2 + 7) + (3 + (3 + 2) * 5 + 8 + (8 * 7) + 3) * 9 * (4 * 7 * 7 + (7 + 5 + 8 + 4 + 4 + 2) + 8) + 5
8 + (6 + 2 + 5 + 2) + 5 * 2 + 4
4 * 2 * ((7 + 8 + 8 * 6 * 5 + 3) * 5 * (6 + 6 * 6) + (5 + 5 + 7) * 8 * 3) * (2 * 5 * 2 * 3) * 7 + 5
8 * (9 + (7 + 8 + 7 * 4 * 4 + 9) + (5 * 7 * 6 * 3) * 6 * 4) + (6 + 8 * (4 + 2 * 8 + 4 * 4) + 8) * (8 * 3 + 3) * 5
((5 + 4 + 3) * 2) + 6 * 3 + (3 + 6 * 4) + 9 + (4 + (8 + 3 * 4 + 2 + 6) * 5 * 2)
4 * ((5 * 6 * 4 + 7) + 6 * 6)
3 + ((5 + 6 * 9) * 5) * ((8 + 5 * 7) + (5 * 3 + 5 + 4) * 7 * 8) * 4 * (3 + 3 * 9 * 4)
8 * 8 * (6 * 7 * 7) * 8
((2 * 4 + 8 * 4) + 6) + ((9 + 2) + 3) + 8
3 + 5 + 6 + 7 * ((3 * 6 + 2) + 9) + 6
9 + 2 * (9 * 9 + 4 * 9)
(8 * 6 * (9 * 2 + 2 + 2) * 4 + 6) + (2 * 8 * 8) + 3 * (7 * 5 + 5) + 3
9 * 9 + (6 + 7 * 6 + 2 + 9 * 7) * (9 + 7) + 6
5 + (8 * 9 * 7 + (3 * 6 + 4 + 9) + 8 * 5) * 8 * (2 + 2 + 7 + (5 * 3 * 2 * 7)) * 3 * 7
2 + 3 + 8 * 4 * 5 + (5 * 9 * 5 * 8)
6 * 6 * ((7 + 5 * 5 * 9 * 3 * 6) * (3 * 7 + 9 * 8 * 8) + 9 * 5 + 7) * 6 * 3
(5 * (5 * 6 * 5 + 5 + 5) * 2 + 8 * 5) * 9
4 + ((9 * 2 * 6 * 2 * 6) * 4 * 6 * 4 * 5 + 9) * (3 + 3 * 8 * 8 * (3 + 5 * 5 * 8)) + (8 * 5 + 7 * 6 + 9) * 9
4 * 9 * (4 + 5 * 7 * 8 + 3) * 2 + 4 * (2 * 6 * (3 + 2 * 7 + 6 + 2) + 5)
((8 * 4 * 9 + 3 * 3 + 2) * 3 * (9 * 7 + 6 + 7 + 3 + 3) * 6 * 2 + 9) + 4 + 5
3 + 9 + 3 + 7
((6 + 9 + 3 + 3 + 4) + 7 * 7) + (3 * (6 * 3 + 6 * 8 + 9) + 8 + (2 * 5 + 7 * 6 * 6 + 7)) * 9 + 2 + 8 * 6
3 + (8 + (2 + 5 + 7 + 7 * 9) + 8)
(4 * 3) * 7 + 6 + 8 + 9 * 3
(4 * 9 * 4 * 9 + 6 * 7) * 7 * 9 + 6 + 9 * 2
(4 * 2 * (9 + 5 * 3 + 8 + 5 * 4) + 6 + (3 * 3 * 2 + 2 * 3)) * 4 + 6 + 3 + 8
9 * 9 + (7 * 8 + 4 * (9 * 8 * 5 + 5 * 3) + 7) * 3
7 * (7 * (5 * 7 * 9 + 8 * 9) + (7 * 8 * 5) + (9 * 2 + 6 + 3 + 3)) * 6 + 6 + 6
8 + 9 + 5 + 6 * ((8 * 7 * 5 * 3 * 9) + (7 + 6 + 7) + 4 * 3 * 8)
2 + (7 * 4 + 6 * 4)
(9 * 8 * 5 + (7 * 6) * 9 + (6 + 8 * 3 + 9)) + 8
2 * 5 * (3 * 4 * 7 * 8) + (9 * 3 + (5 + 8 + 9 * 5 * 9 + 7)) + 3
6 * (8 * (6 + 6) + 9 * 7) + 8 + 7 + 3
(9 * (5 + 2 + 9 * 8 * 4) * 9 + 7) * (2 + 9) + 6
9 + ((2 + 6) + 5 + 8) * 3 + (7 * 2 * (8 + 6 * 2 * 4 * 7) + 8 + 5 * (7 + 4))
8 * 4 * (8 * 7 + 6 + 8 + 9) * 2
4 + 4 * 8 + (2 * 9 * 9 + (5 + 7 + 4) + 7 * (5 + 7 + 7 * 3)) * ((4 + 3 + 5 + 7) * 3 + 7 + 7 + 2) + 3
5 * 9 * 9 + 6 + (9 + 2 + 4 * 5 + 6 * (6 + 3 + 6 * 3))
9 + 3 + 3 * 9 * 4
5 + (4 + 3) + 2 + ((2 * 4 * 6 * 8) * 5) * 5
(5 * (4 + 3 + 7) + 2) + (3 * (6 * 6 * 2)) + 4 + (7 * 7 + 3 + 5 * 6) + (5 * (4 + 4 + 9 * 5 + 7))
(3 + 7 + 5) + ((6 * 8 + 7 * 4) + 8 + 6 + 7 * 2 + 8)
(3 + 7 + 3) * 4 * 6 + 2 * (4 + 7 * 3 + 3) + 7
(2 * 7) + 6 * 9 + 5 * ((3 + 9 * 5 + 5 * 2) * 3 * 9) + 6
((9 + 2 * 3 + 7) + 9 + 6) * 8 * 6 * 4 + ((4 + 9 + 2 * 6 * 9 + 2) * 9 + 9 * (4 + 3 * 9 + 3) + 7 * 3)
2 * 3 + 4 + 7 * 6 * (9 * 5 + 9)
9 + 3 * (8 * 8 + 4 * (8 * 8 + 6 + 3)) * 6 + 2
6 * 7 * (9 * 7) + 9 * 5
4 + 8 + (5 * (9 + 8 + 3 + 5 + 9) * 6 * 9 * 5 * 8) + 2 * ((8 + 2 + 3 + 8) + 3 * (8 * 4 + 4 * 2)) + 7
(3 * 8) * 7 * 2 + 9 * 2
4 * (8 * (4 * 3 * 2 + 6 * 4) * 3 * 5 + 6) + 6
(2 + 8 + 9 * 4) + 2 + 9 + 7 + (6 + 4 + 6 + 6)
5 * 6 * (5 * 6 + (7 * 9 + 5 + 6 * 7 * 5) + 9) * 8 * (9 * 8) + 7
(5 * 6 * 7 + 4 + 9 + 2) * 3 * 4 * 3 + (2 + (4 + 6 + 2 * 3) + 4)
(5 + 3 * 8 + (7 + 6)) + 3 * 7 + 7
8 + 5 * (3 + (5 * 6 * 5) + 6 + 2 * 7 + (9 * 4 + 3)) + 6
2 + (3 * 3 + (4 * 6) * 4 + 5) + (4 + 4) * (8 + 2 + (7 + 6 * 4 * 9 * 7)) + 6 + ((8 + 3) + 7 + 5 + 3)
(9 * 2) * (3 + 8 + 3 * 4) + 4 * 3 + 7 * 8
4 * 3 * 5
((5 + 2 * 5 * 9) * 7 * 3 * 9 + (8 * 5 * 3 * 9 + 7 + 3)) * (9 * 9 + 6)
(9 + (5 * 3 * 4) * 2 + 3 + 5 + 2) + 4 * 5 * 5
2 * 6 * 4 * ((3 * 7 * 4 + 8 * 8) * 4 + 5) + ((6 + 4 * 2 + 9 * 3) + (7 * 7 + 7) * 2 + 7 + 3)
2 + 9 + 6 * (2 * 5 + 9 + 9 * (5 + 8 + 2 * 3) + 5)
(9 + 9 * 9 + 3 * (7 * 2 * 5 + 8)) + 9
8 + 7 * 8 + ((4 * 3 * 4 * 9 + 5 + 6) * (3 * 2))
4 + 3 * (8 * 3) + 6 + (9 + 3 * 3) + (3 * 8)
2 + 3 + 8 * (8 + (4 + 9)) * ((5 + 7 + 9 * 4 + 6) * 2)
6 + 4 + 8 * (4 * 6 + 3) * (8 * 9) + 3
(3 + 5 + 8 * 5) + 7 * (6 + 8 + (7 * 6 + 9 + 5 + 2 * 2) + 2 * 2 * 2) + 6 + ((3 + 4 + 6 * 6 * 3 * 6) + 3 * 3) + 6
7 + 8 * 9 * 6 + 7 + 3
(5 * 7 * 5 * 5 + (3 * 3)) + 9 + 8 * (2 + (6 * 9) * (9 * 6 * 4 * 9) + (9 * 5)) + 4
(4 + (7 * 8 * 4 * 6 * 7 + 6) + 7 * 6) + 4 + 2 + 7 * 4
4 * (5 + 4 + (9 * 4 * 7) + 4 + 2 + (2 + 9)) + (3 + (2 + 3 + 5 + 9 + 4 + 9) * (2 + 7 * 3) * 5) + 8
5 + (5 + (9 + 8 * 9 + 9 + 4) * 6 * 5)
7 * ((7 + 9 * 6 + 9 + 7) + (9 + 3 * 9 * 8 * 4 * 6) * 6 * 9) * 9 * 5
(4 * 5 * 6) * 6 * 6 * (5 + 5 + (2 * 3 * 4)) * 5
9 * (5 + 3 * 9 * (6 * 5 + 9) + 3 + 9) + 6 + ((8 + 8 * 5) * 7 + 4 * 5 + 8 * (8 * 3 * 5)) * 5 * 8
4 + ((7 * 2 * 7 + 2) + 9 * 2 * 4) * (7 + (3 + 9 * 9) + (6 * 5) + (9 + 9 + 5 + 3 + 3)) * 8
(3 + 9 * 8 + 2 * 9 + 9) * 8 * 6
9 * 8
9 * (8 * 4 * 5 + 3 * (9 * 2 * 7 * 6)) * 6 + 4 * 3
9 + 3 * 9 * 4 * (9 * 3 + 3 + 2 * 6) + 9
((4 * 3 + 2 + 7) * 3 * 8 + 2) + 5 * 9
8 + 5 * 9 + (3 + 8 * 4 + 8 * 8) * 5
(6 + 4 * (2 + 9 + 6 + 3 + 9 * 6) + 6) + 2
7 * 6 + ((2 * 6 * 6 * 7) * 2 + (8 * 3 * 2 + 8) * 5 + 6) * 7 * 5
(6 * 6 * 3 * 5 * 6) + 2 + (4 * 6) + 7 + (9 + 6 * 2 * (5 + 9 * 9 + 7 * 5)) * (6 * 3 * 9 + 8)
9 + (2 * (8 + 8 * 7) + 2 * 9 + (6 + 5 + 4 * 2 + 6)) * ((5 * 5 * 2 + 5) + 2 + (7 * 5) + 4 * 2) + 3 + 2
6 * ((6 * 3 + 4 * 4 + 8 + 9) * 9 + 2 * 9 * 4) + 7
2 * 2 * (8 + 6 + 2 * 5 * (5 + 3 * 6 + 3) + 7) + 5 + 9 * 4
(2 + 9 * 2 * 5) + 5 * 6 * 7 + 6 * (8 * 5 * 4 * 2)
8 * ((9 + 6 + 4) * 8 + 9 + 3) + 2
(2 + 2 + 9 + 9) + ((4 * 2 + 7) * 8 * 3 * 9 + 2 + 5) + (6 * 9 * (7 + 8 * 5 + 4 * 8 * 3) * (6 + 5 + 5 * 5 + 6 * 7)) * 5 * 6
6 * 5
4 * ((9 * 7 * 7 + 8 + 5) + 9 * 4 * 4 * 4) * 4 + 7 + 4
7 + (4 * 2 + 6 * 8) * 7 * 6 + 5 + 9
8 + 6 * 4 * (5 * 5) + 7 * ((5 * 8 * 6 * 9 + 6) + 9)
(4 + 9) + 6 + (6 + 4) * (3 + 6 * (8 + 4 * 8 * 2) + 9) * 5
6 * (6 + (7 * 9 * 9 * 2) * 3 * 7) + 7 * 8
4 * (9 + 4 + 9 * 7 * 6) + 4
7 + 3 * (2 * 5 * 4 * 6 + (4 * 3)) + 5 * 5
6 * 5 + 8 * 2 + 5
6 + 2 * (6 * 3 + (2 * 5) + 7 + 7) + (9 + (4 + 3) + (4 + 6 + 7 + 9 * 5) + 3)
((5 + 9 * 4) + 8 * 2 * 5) * 3 + 2 * 8 + (5 * (9 + 3 * 6 + 4 * 2) + 5 * 5) + 5
5 * (6 * 7 * 2 * 4 + 8 * 3) * 9 + 8
(8 + (6 * 3 + 8 * 4)) + (9 + 3 + 7 + 7 * 8 * 4) + (4 * (2 + 8) * 8 * 2 * 9 * 6) + 5
3 + (8 + 4 * 2) * 6
((9 * 2 * 8) * 4) * 4 + 6
((3 * 9) * 5 * 2 * 5 * 3) + ((4 + 4 + 2 + 8) * 3 + (5 + 7) * 6 * 2 + (8 + 6)) + ((9 * 5 * 3 + 3) + (7 * 8 * 4 * 8 * 3) * 7 + 9) + 4 + 4 * 8
2 + 5 + 2 * 3 + 8 + ((2 + 3 * 8) * 4)
9 * (6 + 8 + 5) * 6 + 9 * 2
7 + (6 * 9 + (7 * 4 + 7 + 5 + 7 + 3) * 5 + 7)
9 + 5 * (4 * 6 * 7 + 5 + 4 + 6) * (2 * 8 * 4 + 4 + (2 * 5 * 6) + (9 * 6 * 4 + 9)) + 4 + 6";
}
